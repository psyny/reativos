#include "/home/terra/TerraNG/terra/TerraNet.defs"

pktype usrMsg from radioMsg with
	var ubyte[4] d8;
	var ushort[4] d16;
	var ulong[2] d32;
end

// Informacoes de transmissao
var ushort nodeId = getNodeId();
var ushort targetPai = getNodeId();
var ulong iteracao = 0;
var ubyte distancia = 0; // distancia até o Node raiz ( 11 )

// Estrutura de mensagem
var usrMsg msgRadio;

// Calculo do tempo de transmissão
/* Hash, onde:
A = |Categorias de distancia ate a raiz|
B = |Categorias de possiveis NodeID|
Ai = distancia do no atual a raiz
Bi = NodeID do no atual
p = Constante de dispersão

Para um melhor aproveitamento do hash, é bom selecionar A, B e p como primos.

H1(Bi) = ( ( Bi * p ) % B ) x A
H2(Ai) = ( ( Ai * ( A/2 ) ) % A )

Objetivo do hash:
Nos com mesma quantidades de pulos ate a raiz devem estar dispersadas.
Pois potencialmente tem o mesmo pai.
*/ 
#define SEND_INTERVAL 10000
#define SEND_JUMP_CATEGORIES 5
#define SEND_NODEID_CATEGORIES 11
#define SEND_HASH_TOTAL (SEND_JUMP_CATEGORIES*SEND_NODEID_CATEGORIES)
var ushort sendDelay = (SEND_INTERVAL / SEND_HASH_TOTAL ); // ms
var ushort sendOffset; // ms

// ETAPA 1 - Encontrar arvore geradora
/* 
Convencao:
d8[0] = Numero de saltos a partir do o Node raiz ( 11 )
*/

par/and do
	if nodeId == 11 then 
		// Manda msg para todos
		await 1s;
		targetPai = 1;
		msgRadio.source = nodeId;
		msgRadio.target = BROADCAST;
		msgRadio.d8[0] = 0;
		emit SEND(msgRadio);
		await SEND_DONE;	
	else
		// Aguarda mensagem e descobre o pai
		msgRadio = await RECEIVE;
		targetPai = msgRadio.source;
		distancia = msgRadio.d8[0];
		sendOffset = ( ( ( nodeId * 3 ) % SEND_NODEID_CATEGORIES ) * SEND_JUMP_CATEGORIES ) + ( ( distancia * ( SEND_JUMP_CATEGORIES / 2) ) % SEND_JUMP_CATEGORIES ); // Hash do offset
		// Passa a diante
		msgRadio.source = nodeId;
		msgRadio.target = BROADCAST;
		inc msgRadio.d8[0];
		emit SEND(msgRadio);
		await SEND_DONE;
	end 
with
	await 3s; // Ajuda a garantir sincronia
end

// ETAPA 2 - Transmitir temperatura para o pai
/* 
Convencao:
d8[0] = Numero de saltos
d16[0] = Temperatura Lida
d16[1] = No ID de origem
d16[3] = Pai do no de origem
d32[1] = iteracao ( rodadas de leitura )
*/

// Transmitir temperatura
await ( sendOffset * sendDelay )ms; // Offset para reduzir colisões

par do
	loop do
		par/and do
			await (SEND_INTERVAL)ms;
		with
			emit REQ_TEMP();
			msgRadio.d8[0] = 0; // Numero de saltos
			msgRadio.d16[0] = await TEMP;
			msgRadio.d16[1] = nodeId; // No origem
			msgRadio.d16[3] = targetPai; 
			msgRadio.d32[1] = iteracao;
			inc iteracao;
			msgRadio.target = targetPai;
			emit SEND(msgRadio);
			await SEND_DONE;
		end
	end
with
	loop do
		msgRadio = await RECEIVE;
		if msgRadio.target != BROADCAST then
			msgRadio.target = targetPai;
			inc msgRadio.d8[0]; // Numero de saltos
			emit SEND(msgRadio);
			await SEND_DONE;			
		end;
	end
end


// ----------------------------------------



